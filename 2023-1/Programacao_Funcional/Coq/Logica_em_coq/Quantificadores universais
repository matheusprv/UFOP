(*Quantificadores universal e existencial*)
Hypothesis U : Set.
Hypothesis u : U.
Hypothesis P : U -> Prop.
Hypothesis Q : U -> Prop.
Hypothesis R : U -> Prop.

Lemma forall_and : (forall x : U, P x /\ Q x) -> 
((forall x : U, P x) /\ (forall x : U, Q x)).
Proof.
  intro H.
  split.
  +
    intro y.
    destruct (H y).
    assumption.
  +
    intro y.
    destruct (H y).
    assumption.
Qed.


Lemma forall_modus_ponens : ((forall x : U, P x -> Q x) /\
                             (forall y : U, Q y -> R y)) ->
                            (forall z : U, P z -> R z).
Proof.
  intro Hpqr.
  destruct Hpqr as [Hpq Hqr].
  intro z.
  intro Hpz.
  apply Hqr.
  apply Hpq.
  assumption.
Qed.

Lemma ex_or : (exists x : U, P x \/ Q x) -> (exists x : U, P x) \/ (exists y : U, Q y).
Proof.
  intro Hpq.
  destruct Hpq as [x [Hpx | Hqx]].
  +
    left.
    exists x.
    assumption.
  +
    right.
    exists x.
    assumption.
Qed.


(*Exercício 9*)
Lemma ex9 : forall x : U, P x -> exists y : U, P y.
Proof.
  intro x.
  intro P.
  exists x.
  apply P.
Qed.

(*Exercício 10*)
Lemma ex10 : (forall x : U, P x -> ~ Q x) -> ~ exists y : U, P y /\ Q y.
  intro H1.
  intro H2.
  destruct H2 as [x HPQ].
  destruct HPQ as [HP HQ].
  apply (H1 x).
  apply HP.
  apply HQ.
Qed.


(*Exercício 11*)
Lemma ex11 : (forall x : U, P x -> Q x) -> (forall x : U, ~ Q x) -> (forall x : U, ~ P x).
  intro H1.
  intro H2.
  intro x.
  intro HPx.
  apply (H2 x).
  apply(H1).
  apply HPx.
Qed.

























