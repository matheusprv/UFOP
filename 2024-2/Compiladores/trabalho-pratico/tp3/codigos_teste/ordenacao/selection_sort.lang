gerar_array_reverso(n :: Int) : Int[]{
    -- Gera um vetor de N posições na ordem decrescente
    
    arr :: Int[] = new Int[n];

    i :: Int = n-1;
    iterate(n){
        arr[n-i-1] = i;
        
        i = i-1;
    }
    return arr;
}

print_array(arr :: Int[], n :: Int){
    i :: Int = 0;
    iterate(n){
        print arr[i];
        i = i + 1;
    }
}


selection_sort(arr :: Int[], n :: Int) : Int[] {
    temp :: Int;
    min_index :: Int;
    i :: Int = 0;
    j :: Int = 0;

    iterate(n-1){
        min_index = i;

        j = i + 1;
        iterate(n-j){
            if(arr[j] < arr[min_index]){
                min_index = j;
            }
            j = j + 1;
        }

        temp = arr[min_index];
        arr[min_index] = arr[i];
        arr[i] = temp;

        i = i + 1;
    }
    return arr;
}


main(){
    n   :: Int = 10;
    arr :: Int[] = gerar_array_reverso(n)[0];

    print_array(arr, n);

    print 'b';
    arr = gerar_array_reverso(n)[0];
    arr = selection_sort(arr, n)[0];
    print_array(arr, n);


}