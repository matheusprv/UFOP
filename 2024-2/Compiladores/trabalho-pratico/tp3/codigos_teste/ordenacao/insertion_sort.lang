gerar_array_reverso(n :: Int) : Int[]{
    -- Gera um vetor de N posiÃ§Ãµes na ordem decrescente
    
    arr :: Int[] = new Int[n];

    i :: Int = n-1;
    iterate(n){
        arr[n-i-1] = i;
        
        i = i-1;
    }
    return arr;
}

print_array(arr :: Int[], n :: Int){
    i :: Int = 0;
    iterate(n){
        print arr[i];
        i = i + 1;
    }
}

insertion_sort(arr :: Int[], n :: Int) : Int[] {
    i :: Int;
    j :: Int;
    key :: Int;

    i = 1;
    iterate(n-1){
        key = arr[i];
        j = i - 1;
        
        stop :: Bool = false;
        iterate(j+1){
            if(!stop){
                if(arr[j] > key){
                    arr[j + 1] = arr[j];
                    j = j - 1;    
                }
                else {
                    stop = !stop;
                }
            }
        }

        arr[j + 1] = key;

        i = i + 1;
    }

    return arr;
}


main(){
    n   :: Int = 10;
    arr :: Int[] = gerar_array_reverso(n)[0];

    print_array(arr, n);

    print 'c';
    arr = gerar_array_reverso(n)[0];
    arr = insertion_sort(arr, n)[0];
    print_array(arr, n);

}