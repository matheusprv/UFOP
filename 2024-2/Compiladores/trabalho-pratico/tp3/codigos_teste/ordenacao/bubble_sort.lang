gerar_array_reverso(n :: Int) : Int[]{
    -- Gera um vetor de N posiÃ§Ãµes na ordem decrescente
    
    arr :: Int[] = new Int[n];

    i :: Int = n-1;
    iterate(n){
        arr[n-i-1] = i;
        
        i = i-1;
    }
    return arr;
}

print_array(arr :: Int[], n :: Int){
    i :: Int = 0;
    iterate(n){
        print arr[i];
        i = i + 1;
    }
}

bubble_sort(arr :: Int[], n :: Int) : Int[] {
   
    temp :: Int;
    i :: Int = 0;
    j :: Int;

    iterate(n-1){
        j = 0;
        iterate(n - i - 1){
            if (arr[j] > arr[j+1]){
                temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
            j = j + 1;
        }
        i = i + 1;
    }

    return arr;
}


main(){
    n   :: Int = 10;
    arr :: Int[] = gerar_array_reverso(n)[0];

    print_array(arr, n);

    print 'a';
    arr = bubble_sort(arr, n)[0];
    print_array(arr, n);

}