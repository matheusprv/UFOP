novaPilha(n :: Int) : Int[] {
    arr :: Int[] = new Int[n];
    i :: Int = 0;
    iterate(n) {
        arr[i] = null;  -- Inicializa com zeros (ou algum valor padrão)
        i = i + 1;
    }
    return arr;
}

tamanhoPilha(pilha :: Int[], maximo :: Int) : Int {
    count :: Int = 0;
    iterate(1000) {  -- Limite arbitrário para evitar loop infinito
        if (pilha[count] == null) {
            return count;
        }
        count = count + 1;
    }
    return count;
}

pilhaCheia(pilha :: Int[], maximo :: Int) : Bool {
    return (tamanhoPilha(pilha, maximo)[0] == maximo);
}

inserirNaPilha(pilha :: Int[], chave :: Int, maximo :: Int) : Int[] {
    if (pilhaCheia(pilha, maximo)[0]) {
        print 'N';
        return pilha;
    }

    i :: Int = tamanhoPilha(pilha, maximo)[0];
    pilha[i] = chave;

    return pilha;
}

removerDaPilha(pilha :: Int[], maximo :: Int) : Int[] {
    qtdItens :: Int = tamanhoPilha(pilha, maximo)[0];
    if (qtdItens == 0) {
        print 'n';  -- Pilha vazia
        return pilha;
    }

    pilha[qtdItens - 1] = null;
    return pilha;
}

exibirPilha(pilha :: Int[], maximo :: Int) {
    i :: Int = 0;
    qtdItens :: Int = tamanhoPilha(pilha, maximo)[0];
    iterate(qtdItens) {
        print pilha[i];
        i = i + 1;
    }
}

main() {
    maximo :: Int = 10;
    pilha :: Int[] = novaPilha(maximo)[0];

    pilha = inserirNaPilha(pilha, 77, maximo)[0];
    pilha = inserirNaPilha(pilha, 44, maximo)[0];
    pilha = inserirNaPilha(pilha, 33, maximo)[0];

    exibirPilha(pilha, maximo);

    pilha = removerDaPilha(pilha, maximo)[0];
    exibirPilha(pilha, maximo);
}